require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const twilio = require('twilio');
const { MessagingResponse } = twilio.twiml;
const mongoose = require('mongoose');

require('./db'); // Conexi√≥n Mongoose
const Examen = require('./models/Examen');

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// üëâ Wit.ai: detectar intenci√≥n y nombre del examen si viene
async function getIntent(texto) {
  try {
    const res = await axios.get('https://api.wit.ai/message', {
      headers: { Authorization: process.env.WIT_API_TOKEN },
      params: { q: texto },
    });

    const intent = res.data.intents?.[0]?.name || null;
    const examenEntity = res.data.entities['examen_nombre:examen_nombre']?.[0]?.value || null;

    return { intent, examenEntity };
  } catch (err) {
    console.error('‚ùå Error con Wit.ai:', err);
    return { intent: null, examenEntity: null };
  }
}

app.post('/webhook', async (req, res) => {
  const mensaje = req.body.Body.toLowerCase();
  const numero = req.body.From;

  res.set('Content-Type', 'text/xml');
  res.send('<Response></Response>'); // responder al webhook de inmediato

  const { intent, examenEntity } = await getIntent(mensaje);
  let respuesta = 'Disculpa, no entend√≠ tu mensaje. ¬øPuedes reformularlo?';

  console.log("üß† Intent:", intent, "üî¨ Examen:", examenEntity);

  switch (intent) {
    case 'greetings':
      respuesta = 'üëã ¬°Hola! ¬øTe gustar√≠a conocer nuestros *servicios*, *horarios* o *ubicaci√≥n*?';
      break;

    case 'get_service':
      respuesta = 'üî¨ Realizamos los siguientes servicios: \n ‚úÖ Consultas M√©dicas, \n ‚úÖ Examenes de Laboratorio, \n ‚úÖ Orinentacion en ETS, \n ‚úÖ Examens ETS, \n ‚úÖ Vacunatorio. \n Para m√°s informaci√≥n sobre precios, te invitamos a contactarnos.';
      break;

    case 'get_location':
      respuesta = 'üìç Estamos ubicados en Paseo Ahumada 370 (Metro Plaza de Armas), Oficina 728. Santiago.';
      break;

    case 'get_hours':
      respuesta = '‚è∞ Nuestro horario es:\n- Lunes a Viernes: 08:00 a 18:00\n- S√°bado: 08:00 a 13:00\n- Domingo: Cerrado';
      break;

    case 'get_price':
      if (examenEntity) {
        console.log("üîç Buscando examen:", examenEntity);
        const examen = await Examen.findOne({ 
          nombre: { 
            $regex: examenEntity, 
            $options: 'i' 
          } 
        });

        // Obtener todos los ex√°menes disponibles
        console.log('üîç Iniciando b√∫squeda de ex√°menes...');
        const examenes = await Examen.find({}, 'nombre precio descripcion');
        console.log('üìä Resultados de la b√∫squeda:', examenes);
        console.log('üìù N√∫mero de ex√°menes encontrados:', examenes.length);
        
        let listaExamenes = 'üî¨ *Ex√°menes disponibles:*\n\n';
        
        if (examenes.length === 0) {
          console.log('‚ö†Ô∏è No se encontraron ex√°menes en la base de datos');
          listaExamenes = 'No hay ex√°menes disponibles en este momento.';
        } else {
          examenes.forEach((ex, index) => {
            console.log(`üìã Examen ${index + 1}:`, ex);
            listaExamenes += `üíâ *${ex.nombre}*\nüíµ $${ex.precio}\n${ex.descripcion || ''}\n\n`;
          });
        }
        
        listaExamenes += 'Para m√°s informaci√≥n, te invitamos a contactarnos.';
        
        if (examen) {
          respuesta = `üíâ *${examen.nombre}*\nüíµ Precio: $${examen.precio}\n‚ÑπÔ∏è ${examen.descripcion || 'Para m√°s informaci√≥n, cont√°ctanos.'}\n\n${listaExamenes}`;
        } else {
          respuesta = `No encontr√© un examen llamado *${examenEntity}*. Aqu√≠ te mostramos todos nuestros ex√°menes:\n\n${listaExamenes}`;
        }
      } else {
        respuesta = '¬øDe qu√© examen te gustar√≠a saber el precio? Preguntame "cuanto cuesta un examen de sangre". De todas maneras te invitamos a contactarnos para m√°s informaci√≥n.';
      }
      break;

    case 'farewell':
      respuesta = 'üëã ¬°Gracias por contactarnos! Que tengas un excelente d√≠a.';
      break;

    case 'fallback':
    default:
      respuesta = 'Disculpa, no entend√≠ tu mensaje. ¬øTe gustar√≠a conocer nuestros *horarios*, *servicios* o *ubicaci√≥n*?';
  }

  await new Promise(resolve => setTimeout(resolve, 1800)); // efecto "escribiendo..."
  
  try {
    await client.messages.create({
      from: 'whatsapp:+14155238886',
      to: numero,
      body: respuesta
    });
  } catch (error) {
    if (error.message.includes('exceeded the 9 daily messages limit')) {
      console.error('‚ö†Ô∏è Se ha alcanzado el l√≠mite diario de mensajes de Twilio');
      // No enviamos mensaje al usuario ya que no podemos enviar m√°s mensajes
    } else {
      console.error('‚ùå Error al enviar mensaje:', error);
      // Intentamos enviar un mensaje de error al usuario
      try {
        await client.messages.create({
          from: 'whatsapp:+14155238886',
          to: numero,
          body: 'Lo siento, estamos experimentando problemas t√©cnicos. Por favor, intenta m√°s tarde.'
        });
      } catch (e) {
        console.error('‚ùå No se pudo enviar el mensaje de error:', e);
      }
    }
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`ü§ñ Bot activo en puerto ${PORT}`);
});

// Endpoint de prueba para verificar MongoDB
app.get('/test-db', async (req, res) => {
  try {
    console.log('üîç Probando conexi√≥n a MongoDB...');
    
    // Verificar estado de la conexi√≥n
    const estadoConexion = mongoose.connection.readyState;
    console.log('üìä Estado de la conexi√≥n:', estadoConexion);
    
    // Listar todas las colecciones
    const colecciones = await mongoose.connection.db.listCollections().toArray();
    console.log('üìö Colecciones disponibles:', colecciones.map(c => c.name));
    
    // Verificar datos en cada colecci√≥n similar
    const coleccionesExamenes = ['examenes', 'examanes', 'examens'];
    const resultados = {};
    
    for (const coleccion of coleccionesExamenes) {
      try {
        const datos = await mongoose.connection.db.collection(coleccion).find({}).toArray();
        console.log(`üî¨ Datos en ${coleccion}:`, datos);
        resultados[coleccion] = datos;
      } catch (error) {
        console.error(`‚ùå Error al leer ${coleccion}:`, error);
        resultados[coleccion] = { error: error.message };
      }
    }
    
    res.json({
      estado: 'success',
      conexion: estadoConexion === 1 ? 'conectado' : 'desconectado',
      colecciones: colecciones.map(c => c.name),
      resultados: resultados
    });
  } catch (error) {
    console.error('‚ùå Error en test-db:', error);
    res.status(500).json({
      estado: 'error',
      mensaje: error.message
    });
  }
});

// Endpoint para limpiar y migrar datos
app.get('/cleanup-db', async (req, res) => {
  try {
    console.log('üßπ Iniciando limpieza de base de datos...');
    
    // 1. Obtener datos de la colecci√≥n correcta
    const datosCorrectos = await mongoose.connection.db.collection('examanes').find({}).toArray();
    console.log('üìä Datos encontrados:', datosCorrectos.length);
    
    // 2. Crear colecci√≥n correcta si no existe
    await mongoose.connection.db.createCollection('examenes');
    
    // 3. Insertar datos en la colecci√≥n correcta
    if (datosCorrectos.length > 0) {
      await mongoose.connection.db.collection('examenes').insertMany(datosCorrectos);
      console.log('‚úÖ Datos migrados a la colecci√≥n correcta');
    }
    
    // 4. Eliminar colecciones duplicadas
    await mongoose.connection.db.collection('examanes').drop();
    await mongoose.connection.db.collection('examens').drop();
    console.log('üóëÔ∏è Colecciones duplicadas eliminadas');
    
    res.json({
      estado: 'success',
      mensaje: 'Base de datos limpiada y migrada correctamente',
      datos_migrados: datosCorrectos.length
    });
  } catch (error) {
    console.error('‚ùå Error en cleanup-db:', error);
    res.status(500).json({
      estado: 'error',
      mensaje: error.message
    });
  }
});
